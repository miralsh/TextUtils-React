{"version":3,"sources":["components/Alert.js","components/Navbar.js","components/TextForm.js","App.js","reportWebVitals.js","index.js"],"names":["Alert","props","alert","React","createElement","className","concat","type","role","word","lower","toLowerCase","charAt","toUpperCase","slice","capitalize","msg","Navbar","mode","href","title","data-bs-toggle","data-bs-target","aria-controls","aria-expanded","aria-label","id","aria-current","aboutText","placeholder","onChange","toggleMode","for","TextForm","wc","isLetter","c","myStyle","color","text","setText","useState","textBold","setTextBold","textItalic","setTextItalic","Fragment","style","heading","value","event","target","rows","fontWeight","fontStyle","backgroundColor","onClick","handleUpClick","length","showAlert","newtext","handlelowClick","console","log","handleboldClick","handleitalicClick","handleCopy","document","getElementById","select","navigator","clipboard","writeText","handleExtraSpace","text_opt","split","join","wordCount","i","defaultProps","App","setMode","setAlert","message","setTimeout","body","reportWebVitals","onPerfEntry","Function","then","_ref","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","createRoot","render","StrictMode"],"mappings":"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","file":"static/js/main.8f65eaf0.chunk.js","sourcesContent":["import React from 'react'\r\n\r\nfunction Alert(props) {\r\n  const capitalize=(word)=>{\r\n    const lower = word.toLowerCase();\r\n    return lower.charAt(0).toUpperCase() + lower.slice(1);\r\n  }\r\n  return (\r\n    props.alert && <div className={`alert alert-${props.alert.type} alert-dismissible fade show`} role=\"alert\">\r\n    <strong>{capitalize(props.alert.type)}</strong>: {props.alert.msg}\r\n  </div>\r\n  )\r\n}\r\n\r\nexport default Alert\r\n","import React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\n/* import { Link } from \"react-router-dom\"; */\r\n\r\nexport default function Navbar(props) {\r\n  return (\r\n    <nav\r\n      className={`navbar navbar-expand-lg navbar-${props.mode} bg-${props.mode}`}\r\n    >\r\n      <div className=\"container-fluid\">\r\n        <a className=\"navbar-brand\" href=\"#\">\r\n          {props.title}\r\n        </a>\r\n        <button\r\n          className=\"navbar-toggler\"\r\n          type=\"button\"\r\n          data-bs-toggle=\"collapse\"\r\n          data-bs-target=\"#navbarSupportedContent\"\r\n          aria-controls=\"navbarSupportedContent\"\r\n          aria-expanded=\"false\"\r\n          aria-label=\"Toggle navigation\"\r\n        >\r\n          <span className=\"navbar-toggler-icon\"></span>\r\n        </button>\r\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\r\n          <ul className=\"navbar-nav me-auto mb-2 mb-lg-0\">\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link active\" aria-current=\"page\" href=\"#\">\r\n                Home\r\n              </a>\r\n            </li>\r\n            <li className=\"nav-item\">\r\n              <a className=\"nav-link\" href=\"#\">\r\n                {props.aboutText}\r\n              </a>\r\n            </li>\r\n          </ul>\r\n          <form className=\"d-flex\" role=\"search\">\r\n            <input\r\n              className=\"form-control me-2\"\r\n              type=\"search\"\r\n              placeholder=\"Search\"\r\n              aria-label=\"Search\"\r\n            />\r\n            <button className=\"btn btn-primary\" type=\"submit\">\r\n              Search\r\n            </button>\r\n          </form>\r\n          <div className={`form-check form-switch text-${props.mode === \"light\" ? \"dark\" : \"light\"} mx-2`}>\r\n            <input\r\n              className=\"form-check-input\"\r\n              type=\"checkbox\"\r\n              role=\"switch\"\r\n              id=\"flexSwitchCheckDefault\"\r\n              onChange={props.toggleMode}\r\n            />\r\n            <label className={`form-check-label `} for=\"flexSwitchCheckDefault\">\r\n              Enable Dark Mode\r\n            </label>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    </nav>\r\n  );\r\n}\r\nNavbar.propTypes = { title: PropTypes.string, aboutText: PropTypes.string };\r\nNavbar.defaultProps = {\r\n  title: \"Default Title\",\r\n  aboutText: \"Default about\",\r\n};\r\n","import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    //  console.log(\"btn clicked \"+text);\r\n    if (text.length === 0) {\r\n      props.showAlert(\"Please enter some text!\", \"danger\");\r\n    } else {\r\n      let newtext = text.toUpperCase();\r\n      setText(newtext);\r\n      props.showAlert(\"Converted to UpperCase!\", \"success\");\r\n    }\r\n  };\r\n  const handlelowClick = () => {\r\n    //  console.log(\"btn clicked \"+text);\r\n    let newtext = text.toLowerCase();\r\n    setText(newtext);\r\n    console.log(textBold);\r\n    props.showAlert(\"Converted to LowerCase!\", \"success\");\r\n  };\r\n  const handleboldClick = () => {\r\n    //  console.log(\"btn clicked \"+text);\r\n    let newtext = text;\r\n    setText(newtext);\r\n    if (textBold === \"normal\") {\r\n      setTextBold(\"bold\");\r\n    } else {\r\n      setTextBold(\"normal\");\r\n    }\r\n    console.log(textBold);\r\n  };\r\n  const handleitalicClick = () => {\r\n    //  console.log(\"btn clicked \"+text);\r\n    let newtext = text;\r\n    setText(newtext);\r\n    if (textItalic === \"normal\") {\r\n      setTextItalic(\"italic\");\r\n    } else {\r\n      setTextItalic(\"normal\");\r\n    }\r\n    console.log(textBold);\r\n  };\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"text changed\");\r\n    setText(event.target.value);\r\n  };\r\n  const handleCopy = () => {\r\n    let text = document.getElementById(\"myBox\");\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value);\r\n    props.showAlert(\"Text copied to clipboard!\", \"success\");\r\n  };\r\n  const handleExtraSpace = () => {\r\n    let text_opt = text.split(/[ ]+/);\r\n    setText(text_opt.join(\" \"));\r\n    props.showAlert(\"Extra Spaces Removed!\", \"success\");\r\n  };\r\n  let wc = 0;\r\n  const wordCount = () => {\r\n    if (text.length > 0) {\r\n      for (let i = 0; i < text.length - 1; i++) {\r\n        //Counts all the spaces present in the string\r\n        //It doesn't include the first space as it won't be considered as a word\r\n        if (text[i] === \" \" && isLetter(text.charAt(i + 1)) && i > 0) {\r\n          wc++;\r\n        }\r\n      }\r\n      wc++;\r\n    }\r\n    return wc;\r\n  };\r\n  const isLetter = (c) => {\r\n    return c.toLowerCase() !== c.toUpperCase();\r\n  };\r\n  let myStyle = {\r\n    color: props.mode === \"light\" ? \"black\" : \"white\",\r\n  };\r\n  const [text, setText] = useState(\"Set Text Here2\");\r\n  const [textBold, setTextBold] = useState(\"normal\");\r\n  const [textItalic, setTextItalic] = useState(\"normal\");\r\n  return (\r\n    <>\r\n      <div className=\"container\" style={{ ...myStyle }}>\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n            style={{\r\n              fontWeight: textBold,\r\n              fontStyle: textItalic,\r\n              backgroundColor: props.mode === \"dark\" ? \"grey\" : \"white\",\r\n              color: props.mode === \"dark\" ? \"white\" : \"black\",\r\n            }}\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary\" onClick={handleUpClick}>\r\n          Convert to Uppercase\r\n        </button>\r\n        <button className=\"btn btn-success mx-3\" onClick={handlelowClick}>\r\n          Convert to Lowercase\r\n        </button>\r\n        <button\r\n          className=\"btn1 btn-primary mx-2\"\r\n          value={textBold}\r\n          onClick={handleboldClick}\r\n          style={{ fontWeight: textBold }}\r\n        >\r\n          B\r\n        </button>\r\n        <button\r\n          className=\"btn2 btn-primary mx-2\"\r\n          value={textBold}\r\n          onClick={handleitalicClick}\r\n          style={{ fontStyle: textItalic }}\r\n        >\r\n          I\r\n        </button>\r\n        <button\r\n          className=\"btn btn-primary mx-2\"\r\n          value={textBold}\r\n          onClick={handleCopy}\r\n        >\r\n          CopyText\r\n        </button>\r\n        <button\r\n          className=\"btn btn-primary mx-2\"\r\n          value={textBold}\r\n          onClick={handleExtraSpace}\r\n        >\r\n          Remove Extra Space\r\n        </button>\r\n      </div>\r\n      <div className=\"container my-3\" style={{ ...myStyle }}>\r\n        <h2>Your Text Summary</h2>\r\n\r\n        <p>\r\n          {wordCount()} words and {text.length} characters\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length} Minutes read</p>\r\n        <h2>Preview</h2>\r\n        <p>\r\n          {text.length > 0\r\n            ? text\r\n            : \"Enter Something in the textbox to preview it here\"}\r\n        </p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n","import \"./App.css\";\nimport Alert from \"./components/Alert\";\n/* import About from \"./components/About\"; */\nimport Navbar from \"./components/Navbar\";\nimport TextForm from \"./components/TextForm\";\nimport React, { useState } from \"react\";\n/* import { BrowserRouter as Router, Routes, Route, Link } from \"react-router-dom\"; */\n\nfunction App() {\n  const [mode, setMode] = useState(\"light\");\n  const [alert, setAlert] = useState(null);\n  const toggleMode = () => {\n    if (mode === \"light\") {\n      setMode(\"dark\");\n      document.body.style.backgroundColor = \"#042743\";\n      showAlert(\"Dark mode is enabled\", \"success\");\n      document.title = \"TextUtils - Dark Mode\";\n    } else {\n      setMode(\"light\");\n      document.body.style.backgroundColor = \"white\";\n      showAlert(\"Light mode is enabled\", \"success\");\n      document.title = \"TextUtils - Light Mode\";\n    }\n  };\n  const showAlert = (message, type) => {\n    setAlert({\n      msg: message,\n      type: type,\n    });\n    setTimeout(() => {\n      setAlert(null);\n    }, 1500);\n  };\n  return (\n    <>\n   {/*  <Router> */}\n      <Navbar\n        title=\"MyApp\"\n        aboutText=\"About\"\n        mode={mode}\n        toggleMode={toggleMode}\n      />\n      <Alert alert={alert} />\n      <div className=\"container my-3\">\n       {/*  <Routes>\n          <Route  exact path=\"/about\" \n          element={ <About />}\n          >\n          </Route>\n          <Route exact path=\"/\"\n  element={}> */}\n            <TextForm\n              heading=\"Enter the text to analyze below\"\n              mode={mode}\n              showAlert={showAlert}\n            />\n         {/*  </Route>\n        </Routes> */}\n\n  \n      </div>\n    {/*   </Router> */}\n    </>\n  );\n      }\n\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom/client';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nconst root = ReactDOM.createRoot(document.getElementById('root'));\nroot.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}