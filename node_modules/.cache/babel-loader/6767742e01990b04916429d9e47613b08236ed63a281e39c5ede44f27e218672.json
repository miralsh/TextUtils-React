{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\SANDEEP\\\\Desktop\\\\React\\\\myapp\\\\src\\\\components\\\\TextForm.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from \"react\";\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nexport default function TextForm(props) {\n  _s();\n  const handleUpClick = () => {\n    //  console.log(\"btn clicked \"+text);\n    if (text.length === 0) {\n      props.showAlert(\"Please enter some text!\", \"danger\");\n    } else {\n      let newtext = text.toUpperCase();\n      setText(newtext);\n      props.showAlert(\"Converted to UpperCase!\", \"success\");\n    }\n  };\n  const handlelowClick = () => {\n    //  console.log(\"btn clicked \"+text);\n    let newtext = text.toLowerCase();\n    setText(newtext);\n    console.log(textBold);\n    props.showAlert(\"Converted to LowerCase!\", \"success\");\n  };\n  const handleboldClick = () => {\n    //  console.log(\"btn clicked \"+text);\n    let newtext = text;\n    setText(newtext);\n    if (textBold === \"normal\") {\n      setTextBold(\"bold\");\n    } else {\n      setTextBold(\"normal\");\n    }\n    console.log(textBold);\n  };\n  const handleitalicClick = () => {\n    //  console.log(\"btn clicked \"+text);\n    let newtext = text;\n    setText(newtext);\n    if (textItalic === \"normal\") {\n      setTextItalic(\"italic\");\n    } else {\n      setTextItalic(\"normal\");\n    }\n    console.log(textBold);\n  };\n  const handleOnChange = event => {\n    // console.log(\"text changed\");\n    setText(event.target.value);\n  };\n  const handleCopy = () => {\n    let text = document.getElementById(\"myBox\");\n    text.select();\n    navigator.clipboard.writeText(text.value);\n    props.showAlert(\"Text copied to clipboard!\", \"success\");\n  };\n  const handleExtraSpace = () => {\n    let text_opt = text.split(/[ ]+/);\n    setText(text_opt.join(\" \"));\n    props.showAlert(\"Extra Spaces Removed!\", \"success\");\n  };\n  let wc = 0;\n  const wordCount = () => {\n    for (let i = 0; $i < strlen(text) - 1; i++) {\n      //Counts all the spaces present in the string  \n      //It doesn't include the first space as it won't be considered as a word  \n      if (text[i] == ' ' && char.IsLetter(text.charAt(i + 1)) && i > 0) {\n        wc++;\n      }\n    }\n    wc++;\n  };\n  let myStyle = {\n    color: props.mode === \"light\" ? \"black\" : \"white\"\n  };\n  const [text, setText] = useState(\"Set Text Here2\");\n  const [textBold, setTextBold] = useState(\"normal\");\n  const [textItalic, setTextItalic] = useState(\"normal\");\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container\",\n      style: {\n        ...myStyle\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h1\", {\n        children: props.heading\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 78,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"mb-3\",\n        children: /*#__PURE__*/_jsxDEV(\"textarea\", {\n          className: \"form-control\",\n          value: text,\n          onChange: handleOnChange,\n          id: \"myBox\",\n          rows: \"8\",\n          style: {\n            fontWeight: textBold,\n            fontStyle: textItalic,\n            backgroundColor: props.mode === \"dark\" ? \"grey\" : \"white\",\n            color: props.mode === \"dark\" ? \"white\" : \"black\"\n          }\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 80,\n          columnNumber: 11\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary\",\n        onClick: handleUpClick,\n        children: \"Convert to Uppercase\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 89,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-success mx-3\",\n        onClick: handlelowClick,\n        children: \"Convert to Lowercase\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 92,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn1 btn-primary mx-2\",\n        value: textBold,\n        onClick: handleboldClick,\n        style: {\n          fontWeight: textBold\n        },\n        children: \"B\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 95,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn2 btn-primary mx-2\",\n        value: textBold,\n        onClick: handleitalicClick,\n        style: {\n          fontStyle: textItalic\n        },\n        children: \"I\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 98,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary mx-2\",\n        value: textBold,\n        onClick: handleCopy,\n        children: \"CopyText\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 101,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        className: \"btn btn-primary mx-2\",\n        value: textBold,\n        onClick: handleExtraSpace,\n        children: \"Remove Extra Space\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 104,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"container my-3\",\n      style: {\n        ...myStyle\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Your Text Summary\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 109,\n        columnNumber: 9\n      }, this), \"console.log(\", text.split[\" \"].length, \")\", /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [wc, \" words and \", text.length, \" characters\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 111,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [0.008 * text.split(\" \").length, \" Minutes read\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Preview\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 116,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: text.length > 0 ? text : \"Enter Something in the textbox to preview it here\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 117,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 108,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true);\n}\n_s(TextForm, \"87B0vuEO3NqExpWR+R79U3RRDSI=\");\n_c = TextForm;\nvar _c;\n$RefreshReg$(_c, \"TextForm\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","Fragment","_Fragment","TextForm","props","_s","handleUpClick","text","length","showAlert","newtext","toUpperCase","setText","handlelowClick","toLowerCase","console","log","textBold","handleboldClick","setTextBold","handleitalicClick","textItalic","setTextItalic","handleOnChange","event","target","value","handleCopy","document","getElementById","select","navigator","clipboard","writeText","handleExtraSpace","text_opt","split","join","wc","wordCount","i","$i","strlen","char","IsLetter","charAt","myStyle","color","mode","children","className","style","heading","fileName","_jsxFileName","lineNumber","columnNumber","onChange","id","rows","fontWeight","fontStyle","backgroundColor","onClick","_c","$RefreshReg$"],"sources":["C:/Users/SANDEEP/Desktop/React/myapp/src/components/TextForm.js"],"sourcesContent":["import React, { useState } from \"react\";\r\n\r\nexport default function TextForm(props) {\r\n  const handleUpClick = () => {\r\n    //  console.log(\"btn clicked \"+text);\r\n    if(text.length===0){\r\n      props.showAlert(\"Please enter some text!\",\"danger\")\r\n    }else{\r\n    let newtext = text.toUpperCase();\r\n    setText(newtext);\r\n    props.showAlert(\"Converted to UpperCase!\",\"success\")\r\n    }\r\n  };\r\n  const handlelowClick = () => {\r\n    //  console.log(\"btn clicked \"+text);\r\n    let newtext = text.toLowerCase();\r\n    setText(newtext);\r\n    console.log(textBold);\r\n    props.showAlert(\"Converted to LowerCase!\",\"success\")\r\n  };\r\n  const handleboldClick = () => {\r\n    //  console.log(\"btn clicked \"+text);\r\n    let newtext = text;\r\n    setText(newtext);\r\n    if(textBold === \"normal\"){\r\n    setTextBold(\"bold\");\r\n    }else{\r\n      setTextBold(\"normal\");\r\n    }\r\n    console.log(textBold);\r\n  };\r\n  const handleitalicClick = () => {\r\n    //  console.log(\"btn clicked \"+text);\r\n    let newtext = text;\r\n    setText(newtext);\r\n    if(textItalic === \"normal\"){\r\n    setTextItalic(\"italic\");\r\n    }else{\r\n      setTextItalic(\"normal\");\r\n    }\r\n    console.log(textBold);\r\n  };\r\n  const handleOnChange = (event) => {\r\n    // console.log(\"text changed\");\r\n    setText(event.target.value);\r\n  };\r\n  const handleCopy = () =>{\r\n    let text = document.getElementById(\"myBox\")\r\n    text.select();\r\n    navigator.clipboard.writeText(text.value)\r\n    props.showAlert(\"Text copied to clipboard!\",\"success\")\r\n  }\r\n  const handleExtraSpace = () => {\r\n    let text_opt = text.split(/[ ]+/)\r\n    setText(text_opt.join(\" \"))\r\n    props.showAlert(\"Extra Spaces Removed!\",\"success\")\r\n  }\r\n  let wc=0\r\n  const wordCount=()=>{\r\n    for(let i = 0; $i < strlen(text)-1; i++) {  \r\n      //Counts all the spaces present in the string  \r\n      //It doesn't include the first space as it won't be considered as a word  \r\n      if(text[i] == ' ' && char.IsLetter(text.charAt(i+1)) && (i > 0)) {  \r\n          wc++;  \r\n      }  \r\n  } \r\n  wc++; \r\n  }\r\n  let myStyle = {\r\n    color: props.mode===\"light\"?\"black\":\"white\"\r\n  }\r\n  const [text, setText] = useState(\"Set Text Here2\");\r\n  const[textBold,setTextBold] = useState(\"normal\");\r\n  const[textItalic,setTextItalic] = useState(\"normal\");\r\n  return (\r\n    <>\r\n      <div className=\"container\" style={{...myStyle}}>\r\n        <h1>{props.heading}</h1>\r\n        <div className=\"mb-3\">\r\n          <textarea\r\n            className=\"form-control\"\r\n            value={text}\r\n            onChange={handleOnChange}\r\n            id=\"myBox\"\r\n            rows=\"8\"\r\n            style={{fontWeight:textBold, fontStyle:textItalic, backgroundColor:props.mode===\"dark\"?\"grey\":\"white\",color:props.mode===\"dark\"?\"white\":\"black\"}}\r\n          ></textarea>\r\n        </div>\r\n        <button className=\"btn btn-primary\" onClick={handleUpClick}>\r\n          Convert to Uppercase\r\n        </button>\r\n        <button className=\"btn btn-success mx-3\" onClick={handlelowClick}>\r\n          Convert to Lowercase\r\n        </button>\r\n        <button className=\"btn1 btn-primary mx-2\" value={textBold} onClick={handleboldClick} style={{fontWeight:textBold}} >\r\n          B\r\n        </button>\r\n        <button className=\"btn2 btn-primary mx-2\" value={textBold} onClick={handleitalicClick}  style={{fontStyle:textItalic}} >\r\n          I\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" value={textBold} onClick={handleCopy}   >\r\n          CopyText\r\n        </button>\r\n        <button className=\"btn btn-primary mx-2\" value={textBold} onClick={handleExtraSpace}   >\r\n          Remove Extra Space\r\n        </button>\r\n      </div>\r\n      <div className=\"container my-3\" style={{...myStyle}}>\r\n        <h2>Your Text Summary</h2>\r\n        console.log({text.split[\" \"].length})\r\n        <p>\r\n          \r\n          {wc} words and {text.length} characters\r\n        </p>\r\n        <p>{0.008 * text.split(\" \").length} Minutes read</p>\r\n        <h2>Preview</h2>\r\n        <p>{text.length>0?text:\"Enter Something in the textbox to preview it here\"}</p>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}